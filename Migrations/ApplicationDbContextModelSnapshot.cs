// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebService.Data;
using WebService.Models;

namespace WebService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebService.Models.ApplicationUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Role");

                    b.HasKey("ID");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("WebService.Models.Appreciation", b =>
                {
                    b.Property<int>("ApplicationUserID");

                    b.Property<int>("DestinationID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreateDate");

                    b.Property<double>("Rating");

                    b.HasKey("ApplicationUserID", "DestinationID");

                    b.HasIndex("DestinationID");

                    b.ToTable("Appreciations");
                });

            modelBuilder.Entity("WebService.Models.Destination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Attributions")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("WebsiteUri")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("WebService.Models.Location", b =>
                {
                    b.Property<int>("DestinationID");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("DestinationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WebService.Models.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content")
                        .IsRequired();

                    b.Property<int>("DestinationID");

                    b.HasKey("ID");

                    b.HasIndex("DestinationID");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("WebService.Models.Appreciation", b =>
                {
                    b.HasOne("WebService.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Appreciations")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebService.Models.Destination", "Destination")
                        .WithMany("Appreciations")
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebService.Models.Location", b =>
                {
                    b.HasOne("WebService.Models.Destination", "Destination")
                        .WithOne("Location")
                        .HasForeignKey("WebService.Models.Location", "DestinationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebService.Models.Picture", b =>
                {
                    b.HasOne("WebService.Models.Destination", "Destination")
                        .WithMany("Pictures")
                        .HasForeignKey("DestinationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
